{"version":3,"sources":["../../../src/modules/user/UserModel.js"],"names":["Schema","mongoose","name","type","String","trim","password","hidden","email","required","index","lowercase","active","Boolean","default","isAdmin","description","timestamps","createdAt","updatedAt","collection","unique","pre","hashPassword","next","isModified","encryptPassword","then","hash","catch","err","methods","authenticate","plainText","bcrypt","compare","model"],"mappings":";;;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,SAAS,IAAIC,mBAASD,MAAb,CACb;AACEE,QAAM;AACJC,UAAMC,MADF;AAEJC,UAAM;AAFF,GADR;AAKEC,YAAU;AACRH,UAAMC,MADE;AAERG,YAAQ;AAFA,GALZ;AASEC,SAAO;AACLL,UAAMC,MADD;AAELK,cAAU,IAFL;AAGLC,WAAO,IAHF;AAILC,eAAW,IAJN;AAKLN,UAAM;AALD,GATT;AAgBEO,UAAQ;AACNT,UAAMU,OADA;AAENC,aAAS,IAFH;AAGNL,cAAU;AAHJ,GAhBV;AAqBEM,WAAS;AACPZ,UAAMU,OADC;AAEPJ,cAAU,KAFH;AAGPK,aAAS,KAHF;AAIPE,iBAAa;AAJN;AArBX,CADa,EA6Bb;AACEC,cAAY;AACVC,eAAW,WADD;AAEVC,eAAW;AAFD,GADd;AAKEC,cAAY;AALd,CA7Ba,CAAf;;AAsCApB,OAAOU,KAAP,CAAa,EAAER,MAAM,MAAR,EAAb;AACAF,OAAOU,KAAP,CAAa,EAAEF,OAAO,CAAT,EAAb,EAA2B,EAAEa,QAAQ,IAAV,EAA3B;;AAEArB,OAAOsB,GAAP,CAAW,MAAX,EAAmB,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC7C;AACA;AACA,MAAI,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAiC;AAC/B,SAAKC,eAAL,CAAqB,KAAKpB,QAA1B,EACGqB,IADH,CACSC,IAAD,IAAU;AACd,WAAKtB,QAAL,GAAgBsB,IAAhB;AACAJ;AACD,KAJH,EAKGK,KALH,CAKSC,OAAON,KAAKM,GAAL,CALhB;AAMD,GAPD,MAOO;AACL,WAAON,MAAP;AACD;AACF,CAbD;;AAeAxB,OAAO+B,OAAP,GAAiB;AACf,QAAMC,YAAN,CAAmBC,SAAnB,EAA8B;AAC5B,QAAI;AACF,aAAO,MAAMC,mBAAOC,OAAP,CAAeF,SAAf,EAA0B,KAAK3B,QAA/B,CAAb;AACD,KAFD,CAEE,OAAOwB,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF,GAPc;AAQfJ,kBAAgBpB,QAAhB,EAA0B;AACxB,WAAO4B,mBAAON,IAAP,CAAYtB,QAAZ,EAAsB,CAAtB,CAAP;AACD;AAVc,CAAjB;;kBAaeL,mBAASmC,KAAT,CAAe,MAAf,EAAuBpC,MAAvB,C","file":"UserModel.js","sourcesContent":["// @flow\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nconst Schema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      trim: true,\n    },\n    password: {\n      type: String,\n      hidden: true,\n    },\n    email: {\n      type: String,\n      required: true,\n      index: true,\n      lowercase: true,\n      trim: true,\n    },\n    active: {\n      type: Boolean,\n      default: true,\n      required: true,\n    },\n    isAdmin: {\n      type: Boolean,\n      required: false,\n      default: false,\n      description: 'Whether the user is admin or not',\n    },\n  },\n  {\n    timestamps: {\n      createdAt: 'createdAt',\n      updatedAt: 'updatedAt',\n    },\n    collection: 'User',\n  },\n);\n\nSchema.index({ name: 'text' });\nSchema.index({ email: 1 }, { unique: true });\n\nSchema.pre('save', function hashPassword(next) {\n  // eslint-disable-line func-names\n  // Hash the password\n  if (this.isModified('password')) {\n    this.encryptPassword(this.password)\n      .then((hash) => {\n        this.password = hash;\n        next();\n      })\n      .catch(err => next(err));\n  } else {\n    return next();\n  }\n});\n\nSchema.methods = {\n  async authenticate(plainText) {\n    try {\n      return await bcrypt.compare(plainText, this.password);\n    } catch (err) {\n      return false;\n    }\n  },\n  encryptPassword(password) {\n    return bcrypt.hash(password, 8);\n  },\n};\n\nexport default mongoose.model('User', Schema);\n"]}