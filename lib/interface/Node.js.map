{"version":3,"sources":["../../src/interface/Node.js"],"names":["registerType","registeredTypes","type","name","nodeField","nodeInterface","globalId","context","id","loader","dataloaders","load","object","constructor"],"mappings":";;;;;;QAMgBA,Y,GAAAA,Y;;AALhB;;AAGA,MAAMC,kBAAkB,EAAxB;AAEO,SAASD,YAAT,CAAsBE,IAAtB,EAA+C;AACpDD,kBAAgBC,KAAKC,IAArB,IAA6BD,IAA7B;AACA,SAAOA,IAAP;AACD;;AAEM,MAAM,EAAEE,SAAF,EAAaC,aAAb,KAA+B,mCAAgB,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjF,QAAM,EAAEL,IAAF,EAAQM,EAAR,KAAe,gCAAaF,QAAb,CAArB;AACA,QAAMG,SAASF,QAAQG,WAAR,CAAqB,GAAER,IAAK,QAA5B,CAAf;AACA,SAAQO,UAAUA,OAAOE,IAAP,CAAYH,EAAZ,CAAX,IAA+B,IAAtC;AACD,CAJ2C,EAIzCI,UAAUX,gBAAgBW,OAAOC,WAAP,CAAmBV,IAAnC,KAA4C,IAJb,CAArC;QAAQC,S,GAAAA,S;QAAWC,a,GAAAA,a","file":"Node.js","sourcesContent":["// @flow\nimport { fromGlobalId, nodeDefinitions } from 'graphql-relay';\nimport type { GraphQLObjectType } from 'graphql';\n\nconst registeredTypes = {};\n\nexport function registerType(type: GraphQLObjectType) {\n  registeredTypes[type.name] = type;\n  return type;\n}\n\nexport const { nodeField, nodeInterface } = nodeDefinitions((globalId, context) => {\n  const { type, id } = fromGlobalId(globalId);\n  const loader = context.dataloaders[`${type}Loader`];\n  return (loader && loader.load(id)) || null;\n}, object => registeredTypes[object.constructor.name] || null);\n"]}