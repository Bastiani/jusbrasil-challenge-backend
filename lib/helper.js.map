{"version":3,"sources":["../src/helper.js"],"names":["generateToken","UserLoader","getUser","dataloaders","token","user","decodedToken","jwt","verify","replace","trim","jwtSecret","load","id","err","getDataloaders","loaders","Object","keys","reduce","prev","loaderKey","getLoader","undefined","sign","_id"],"mappings":";;;;;;QA6CgBA,a,GAAAA,a;;AA5ChB;;;;AAEA;;AAEA;;IAAYC,U;;;;;;AAGZ;;;;;AAKO,MAAMC,4BAAU,OAAOC,WAAP,EAAiCC,KAAjC,KAAmD;AACxE,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAEC,MAAM,IAAR,EAAP;AACD;;AAED,MAAI;AACF,UAAMC,eAAeC,uBAAIC,MAAJ,CAAWJ,MAAMK,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyBC,IAAzB,EAAX,EAA4CC,iBAA5C,CAArB;AACA,UAAMN,OAAO,MAAMJ,WAAWW,IAAX,CAAgB,EAAET,WAAF,EAAhB,EAAiCG,aAAaO,EAA9C,CAAnB;;AAEA,QAAI,CAACR,IAAL,EAAW;AACT,aAAO,EAAEA,MAAM,IAAR,EAAP;AACD;;AAED,WAAO,EAAEA,IAAF,EAAP;AACD,GATD,CASE,OAAOS,GAAP,EAAY;AACZ,WAAO,EAAET,MAAM,IAAR,EAAP;AACD;AACF,CAjBM;;AAmBP;;AACO,MAAMU,0CAAkBC,OAAD,IAA0CC,OAAOC,IAAP,CAAYF,OAAZ,EAAqBG,MAArB,CACtE,CAACC,IAAD,EAAOC,SAAP,MAA8B;AAC5B,KAAGD,IADyB;AAE5B,GAACC,SAAD,GAAaL,QAAQK,SAAR,EAAmBC,SAAnB,GAA+BN,QAAQK,SAAR,EAAmBC,SAAnB,EAA/B,GAAgEC;AAFjD,CAA9B,CADsE,EAKtE,EALsE,CAAjE;;AAYA,SAASvB,aAAT,CAAuBK,IAAvB,EAAuC;AAC5C,SAAQ,OAAME,uBAAIiB,IAAJ,CAAS,EAAEX,IAAIR,KAAKoB,GAAX,EAAT,EAA2Bd,iBAA3B,CAAsC,EAApD;AACD","file":"helper.js","sourcesContent":["// @flow\nimport jwt from 'jsonwebtoken';\n\nimport { jwtSecret } from './config';\n\nimport * as UserLoader from './modules/user/UserLoader';\nimport type { Dataloaders } from './flow/Dataloaders';\n\n/**\n * Return user and seller given a JWT token\n * @param token - jwt token with userId\n * @returns {*}\n */\nexport const getUser = async (dataloaders: Dataloaders, token: string) => {\n  if (!token) {\n    return { user: null };\n  }\n\n  try {\n    const decodedToken = jwt.verify(token.replace('JWT', '').trim(), jwtSecret);\n    const user = await UserLoader.load({ dataloaders }, decodedToken.id);\n\n    if (!user) {\n      return { user: null };\n    }\n\n    return { user };\n  } catch (err) {\n    return { user: null };\n  }\n};\n\n// $FlowFixMe\nexport const getDataloaders = (loaders: Loaders): GraphQLDataloaders => Object.keys(loaders).reduce(\n  (prev, loaderKey: string) => ({\n    ...prev,\n    [loaderKey]: loaders[loaderKey].getLoader ? loaders[loaderKey].getLoader() : undefined,\n  }),\n  {},\n);\n\ntype UserType = {\n  _id: string,\n};\n\nexport function generateToken(user: UserType) {\n  return `JWT ${jwt.sign({ id: user._id }, jwtSecret)}`;\n}\n"]}