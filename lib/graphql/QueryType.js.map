{"version":3,"sources":["../../src/graphql/QueryType.js"],"names":["UserLoader","ProductLoader","OrderLoader","GraphQLObjectType","name","description","fields","node","nodeField","me","type","UserType","resolve","root","args","context","load","user","id","users","UserConnection","connectionType","connectionArgs","search","GraphQLString","obj","loadUsers","product","ProductType","GraphQLID","products","ProductConnection","loadProducts","order","OrderType","orders","OrderConnection","active","GraphQLBoolean","loadOrders"],"mappings":";;;;;;AACA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;AAEA;;IAAYA,U;;AACZ;;IAAYC,a;;AACZ;;IAAYC,W;;;;;;kBAEG,IAAIC,0BAAJ,CAAsB;AACnCC,QAAM,OAD6B;AAEnCC,eAAa,4BAFsB;AAGnCC,UAAQ,OAAO;AACbC,UAAMC,eADO;AAEbC,QAAI;AACFC,YAAMC,kBADJ;AAEFN,mBAAa,uBAFX;AAGFO,eAAS,OAAOC,IAAP,EAAaC,IAAb,EAAmBC,OAAnB,KAA+Bf,WAAWgB,IAAX,CAAgBD,OAAhB,EAAyBA,QAAQE,IAAR,IAAgBF,QAAQE,IAAR,CAAaC,EAAtD;AAHtC,KAFS;AAObC,WAAO;AACLT,YAAM,6BAAeU,yBAAeC,cAA9B,CADD;AAELP,YAAM;AACJ,WAAGQ,4BADC;AAEJC,gBAAQ;AACNb,gBAAMc;AADA;AAFJ,OAFD;AAQLZ,eAAS,OAAOa,GAAP,EAAYX,IAAZ,EAAkBC,OAAlB,KAA8B,MAAMf,WAAW0B,SAAX,CAAqBX,OAArB,EAA8BD,IAA9B;AARxC,KAPM;AAiBba,aAAS;AACPjB,YAAMkB,qBADC;AAEPvB,mBAAa,aAFN;AAGPS,YAAM;AACJI,YAAI;AACFR,gBAAM,6BAAemB,kBAAf;AADJ;AADA,OAHC;AAQPjB,eAAS,OAAOC,IAAP,EAAa,EAAEK,EAAF,EAAb,EAAqBH,OAArB,KAAiCd,cAAce,IAAd,CAAmBD,OAAnB,EAA4B,gCAAaG,EAAb,EAAiBA,EAA7C;AARnC,KAjBI;AA2BbY,cAAU;AACRpB,YAAM,6BAAeqB,+BAAkBV,cAAjC,CADE;AAERhB,mBAAa,eAFL;AAGRS,YAAM;AACJ,WAAGQ,4BADC;AAEJC,gBAAQ;AACNb,gBAAMc;AADA;AAFJ,OAHE;AASRZ,eAAS,OAAOa,GAAP,EAAYX,IAAZ,EAAkBC,OAAlB,KAA8B,MAAMd,cAAc+B,YAAd,CAA2BjB,OAA3B,EAAoCD,IAApC;AATrC,KA3BG;AAsCbmB,WAAO;AACLvB,YAAMwB,mBADD;AAEL7B,mBAAa,WAFR;AAGLS,YAAM;AACJI,YAAI;AACFR,gBAAM,6BAAemB,kBAAf;AADJ;AADA,OAHD;AAQLjB,eAAS,OAAOC,IAAP,EAAa,EAAEK,EAAF,EAAb,EAAqBH,OAArB,KAAiCb,YAAYc,IAAZ,CAAiBD,OAAjB,EAA0B,gCAAaG,EAAb,EAAiBA,EAA3C;AARrC,KAtCM;AAgDbiB,YAAQ;AACNzB,YAAM,6BAAe0B,2BAAgBf,cAA/B,CADA;AAENhB,mBAAa,YAFP;AAGNS,YAAM;AACJ,WAAGQ,4BADC;AAEJe,gBAAQ;AACN3B,gBAAM4B;AADA;AAFJ,OAHA;AASN1B,eAAS,OAAOC,IAAP,EAAaC,IAAb,EAAmBC,OAAnB,KAA+Bb,YAAYqC,UAAZ,CAAuBxB,OAAvB,EAAgCD,IAAhC;AATlC;AAhDK,GAAP;AAH2B,CAAtB,C","file":"QueryType.js","sourcesContent":["// @flow\nimport { GraphQLObjectType, GraphQLNonNull, GraphQLString, GraphQLID, GraphQLBoolean } from 'graphql';\nimport { connectionArgs, fromGlobalId } from 'graphql-relay';\n\nimport UserType, { UserConnection } from '../modules/user/UserType';\nimport ProductType, { ProductConnection } from '../modules/product/ProductType';\nimport OrderType, { OrderConnection } from '../modules/order/OrderType';\nimport { nodeField } from '../interface/Node';\n\nimport * as UserLoader from '../modules/user/UserLoader';\nimport * as ProductLoader from '../modules/product/ProductLoader';\nimport * as OrderLoader from '../modules/order/OrderLoader';\n\nexport default new GraphQLObjectType({\n  name: 'Query',\n  description: 'The root of all... queries',\n  fields: () => ({\n    node: nodeField,\n    me: {\n      type: UserType,\n      description: 'Me is the logged user',\n      resolve: async (root, args, context) => UserLoader.load(context, context.user && context.user.id),\n    },\n    users: {\n      type: GraphQLNonNull(UserConnection.connectionType),\n      args: {\n        ...connectionArgs,\n        search: {\n          type: GraphQLString,\n        },\n      },\n      resolve: async (obj, args, context) => await UserLoader.loadUsers(context, args),\n    },\n    product: {\n      type: ProductType,\n      description: 'Get product',\n      args: {\n        id: {\n          type: GraphQLNonNull(GraphQLID),\n        },\n      },\n      resolve: async (root, { id }, context) => ProductLoader.load(context, fromGlobalId(id).id),\n    },\n    products: {\n      type: GraphQLNonNull(ProductConnection.connectionType),\n      description: 'Find Products',\n      args: {\n        ...connectionArgs,\n        search: {\n          type: GraphQLString,\n        },\n      },\n      resolve: async (obj, args, context) => await ProductLoader.loadProducts(context, args),\n    },\n    order: {\n      type: OrderType,\n      description: 'Get order',\n      args: {\n        id: {\n          type: GraphQLNonNull(GraphQLID),\n        },\n      },\n      resolve: async (root, { id }, context) => OrderLoader.load(context, fromGlobalId(id).id),\n    },\n    orders: {\n      type: GraphQLNonNull(OrderConnection.connectionType),\n      description: 'Get orders',\n      args: {\n        ...connectionArgs,\n        active: {\n          type: GraphQLBoolean,\n        },\n      },\n      resolve: async (root, args, context) => OrderLoader.loadOrders(context, args),\n    },\n  }),\n});\n"]}