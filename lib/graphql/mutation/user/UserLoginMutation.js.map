{"version":3,"sources":["../../../../src/graphql/mutation/user/UserLoginMutation.js"],"names":["name","inputFields","email","type","GraphQLString","password","mutateAndGetPayload","token","error","user","UserModel","findOne","toLowerCase","correctPassword","authenticate","err","outputFields","resolve"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;;;AAEA;;;;kBAEe,gDAA6B;AAC1CA,QAAM,WADoC;AAE1CC,eAAa;AACXC,WAAO;AACLC,YAAM,6BAAeC,sBAAf;AADD,KADI;AAIXC,cAAU;AACRF,YAAM,6BAAeC,sBAAf;AADE;AAJC,GAF6B;AAU1CE,uBAAqB,OAAO,EAAEJ,KAAF,EAASG,QAAT,EAAP,KAA+B;AAClD,QAAI,CAACH,KAAD,IAAU,CAACG,QAAf,EAAyB;AACvB,aAAO;AACLE,eAAO,IADF;AAELC,eAAO;AAFF,OAAP;AAID;;AAED,UAAMC,OAAO,MAAMC,oBAAUC,OAAV,CAAkB;AACnCT,aAAOA,MAAMU,WAAN;AAD4B,KAAlB,CAAnB;;AAIA,QAAI,CAACH,IAAL,EAAW;AACT,aAAO;AACLF,eAAO,IADF;AAELC,eAAO;AAFF,OAAP;AAID;;AAED,QAAI,CAACC,KAAKJ,QAAV,EAAoB;AAClB,aAAO;AACLE,eAAO,IADF;AAELC,eAAO;AAFF,OAAP;AAID;;AAED,QAAIK,kBAAkB,IAAtB;AACA,QAAI;AACFA,wBAAkB,MAAMJ,KAAKK,YAAL,CAAkBT,QAAlB,CAAxB;AACD,KAFD,CAEE,OAAOU,GAAP,EAAY;AACZ,aAAO;AACLR,eAAO,IADF;AAELC,eAAO;AAFF,OAAP;AAID;;AAED,QAAI,CAACK,eAAL,EAAsB;AACpB,aAAO;AACLN,eAAO,IADF;AAELC,eAAO;AAFF,OAAP;AAID;;AAED,UAAMD,QAAQ,2BAAcE,IAAd,CAAd;;AAEA,WAAO;AACLF,WADK;AAELC,aAAO;AAFF,KAAP;AAID,GA3DyC;AA4D1CQ,gBAAc;AACZT,WAAO;AACLJ,YAAMC,sBADD;AAELa,eAAS,CAAC,EAAEV,KAAF,EAAD,KAAeA;AAFnB,KADK;AAKZC,WAAO;AACLL,YAAMC,sBADD;AAELa,eAAS,CAAC,EAAET,KAAF,EAAD,KAAeA;AAFnB;AALK;AA5D4B,CAA7B,C","file":"UserLoginMutation.js","sourcesContent":["import { GraphQLString, GraphQLNonNull } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\n\nimport UserModel from '../../../modules/user/UserModel';\n\nimport { generateToken } from '../../../helper';\n\nexport default mutationWithClientMutationId({\n  name: 'UserLogin',\n  inputFields: {\n    email: {\n      type: GraphQLNonNull(GraphQLString),\n    },\n    password: {\n      type: GraphQLNonNull(GraphQLString),\n    },\n  },\n  mutateAndGetPayload: async ({ email, password }) => {\n    if (!email || !password) {\n      return {\n        token: null,\n        error: 'Email ou senha inválidos',\n      };\n    }\n\n    const user = await UserModel.findOne({\n      email: email.toLowerCase(),\n    });\n\n    if (!user) {\n      return {\n        token: null,\n        error: 'Email ou senha inválidos',\n      };\n    }\n\n    if (!user.password) {\n      return {\n        token: null,\n        error: 'Email ou senha inválidos',\n      };\n    }\n\n    let correctPassword = null;\n    try {\n      correctPassword = await user.authenticate(password);\n    } catch (err) {\n      return {\n        token: null,\n        error: 'Email ou senha inválidos',\n      };\n    }\n\n    if (!correctPassword) {\n      return {\n        token: null,\n        error: 'Email ou senha inválidos',\n      };\n    }\n\n    const token = generateToken(user);\n\n    return {\n      token,\n      error: null,\n    };\n  },\n  outputFields: {\n    token: {\n      type: GraphQLString,\n      resolve: ({ token }) => token,\n    },\n    error: {\n      type: GraphQLString,\n      resolve: ({ error }) => error,\n    },\n  },\n});\n"]}