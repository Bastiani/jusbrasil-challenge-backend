{"version":3,"sources":["../../../../src/graphql/mutation/user/UserAddMutation.js"],"names":["UserLoader","mutation","name","inputFields","type","GraphQLString","password","email","active","GraphQLBoolean","mutateAndGetPayload","args","newUser","User","save","id","_id","error","outputFields","user","UserType","resolve","context","load"],"mappings":";;;;;;AAAA;;AACA;;AAEA;;;;AAEA;;IAAYA,U;;AACZ;;;;;;;;AAEA,MAAMC,WAAW,gDAA6B;AAC5CC,QAAM,SADsC;AAE5CC,eAAa;AACXD,UAAM;AACJE,YAAM,6BAAeC,sBAAf;AADF,KADK;AAIXC,cAAU;AACRF,YAAMC;AADE,KAJC;AAOXE,WAAO;AACLH,YAAM,6BAAeC,sBAAf;AADD,KAPI;AAUXG,YAAQ;AACNJ,YAAMK;AADA;AAVG,GAF+B;AAgB5CC,uBAAqB,MAAMC,IAAN,IAAc;AACjC,UAAM,EAAET,IAAF,EAAQI,QAAR,EAAkBC,KAAlB,EAAyBC,MAAzB,KAAoCG,IAA1C;;AAEA,UAAMC,UAAU,MAAM,IAAIC,mBAAJ,CAAS;AAC7BX,UAD6B;AAE7BI,cAF6B;AAG7BC,WAH6B;AAI7BC;AAJ6B,KAAT,EAKnBM,IALmB,EAAtB;;AAOA,WAAO;AACLC,UAAIH,QAAQI,GADP;AAELC,aAAO;AAFF,KAAP;AAID,GA9B2C;AA+B5CC,gBAAc;AACZC,UAAM;AACJf,YAAMgB,kBADF;AAEJC,eAAS,OAAO,EAAEN,EAAF,EAAP,EAAeJ,IAAf,EAAqBW,OAArB,KAAiC;AACxC,cAAMV,UAAU,MAAMZ,WAAWuB,IAAX,CAAgBD,OAAhB,EAAyBP,EAAzB,CAAtB;;AAEA,YAAI,CAACH,OAAL,EAAc;AACZ,iBAAO,IAAP;AACD;;AAED,eAAOA,OAAP;AACD;AAVG,KADM;AAaZK,WAAO;AACLb,YAAMC,sBADD;AAELgB,eAAS,CAAC,EAAEJ,KAAF,EAAD,KAAeA;AAFnB;AAbK;AA/B8B,CAA7B,CAAjB;;kBAmDehB,Q","file":"UserAddMutation.js","sourcesContent":["import { GraphQLBoolean, GraphQLNonNull, GraphQLString } from 'graphql';\nimport { mutationWithClientMutationId } from 'graphql-relay';\n\nimport User from '../../../modules/user/UserModel';\n\nimport * as UserLoader from '../../../modules/user/UserLoader';\nimport UserType from '../../../modules/user/UserType';\n\nconst mutation = mutationWithClientMutationId({\n  name: 'UserAdd',\n  inputFields: {\n    name: {\n      type: GraphQLNonNull(GraphQLString),\n    },\n    password: {\n      type: GraphQLString,\n    },\n    email: {\n      type: GraphQLNonNull(GraphQLString),\n    },\n    active: {\n      type: GraphQLBoolean,\n    },\n  },\n  mutateAndGetPayload: async args => {\n    const { name, password, email, active } = args;\n\n    const newUser = await new User({\n      name,\n      password,\n      email,\n      active,\n    }).save();\n\n    return {\n      id: newUser._id,\n      error: null,\n    };\n  },\n  outputFields: {\n    user: {\n      type: UserType,\n      resolve: async ({ id }, args, context) => {\n        const newUser = await UserLoader.load(context, id);\n\n        if (!newUser) {\n          return null;\n        }\n\n        return newUser;\n      },\n    },\n    error: {\n      type: GraphQLString,\n      resolve: ({ error }) => error,\n    },\n  },\n});\n\nexport default mutation;\n"]}