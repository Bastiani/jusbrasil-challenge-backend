{"version":3,"sources":["../../../src/graphql/connection/customConnection.js"],"names":["connectionDefinitions","forwardConnectionArgs","after","type","GraphQLString","first","GraphQLInt","backwardConnectionArgs","before","last","connectionArgs","resolveMaybeThunk","thingOrThunk","config","nodeType","name","edgeFields","connectionFields","resolveNode","resolveCursor","edgeType","GraphQLObjectType","description","fields","node","resolve","cursor","GraphQLNonNull","connectionType","pageInfo","pageInfoType","edges","GraphQLList","hasNextPage","GraphQLBoolean","hasPreviousPage","startCursor","endCursor"],"mappings":";;;;;;QAsEgBA,qB,GAAAA,qB;;AA7DhB;;AAIA;;;;AAIO,MAAMC,wDAAuD;AAClEC,SAAO;AACLC,UAAMC;AADD,GAD2D;AAIlEC,SAAO;AACLF,UAAMG;AADD;AAJ2D,CAA7D;;AASP;;;;AA1BA;;;;;;;;;AA8BO,MAAMC,0DAAwD;AACnEC,UAAQ;AACNL,UAAMC;AADA,GAD2D;AAInEK,QAAM;AACJN,UAAMG;AADF;AAJ6D,CAA9D;;AASP;;;;AAIO,MAAMI,0CAAgD;AAC3D,KAAGT,qBADwD;AAE3D,KAAGM;AAFwD,CAAtD;;AAmBP,SAASI,iBAAT,CAA8BC,YAA9B,EAAyD;AACvD,SAAO,OAAOA,YAAP,KAAwB,UAAxB,GAAqCA,cAArC,GAAsDA,YAA7D;AACD;;AAED;;;;AAIO,SAASZ,qBAAT,CAA+Ba,MAA/B,EAAuF;AAC5F,QAAM,EAAEC,QAAF,KAAeD,MAArB;AACA,QAAME,OAAOF,OAAOE,IAAP,IAAeD,SAASC,IAArC;AACA,QAAMC,aAAaH,OAAOG,UAAP,IAAqB,EAAxC;AACA,QAAMC,mBAAmBJ,OAAOI,gBAAP,IAA2B,EAApD;AACA,QAAM,EAAEC,WAAF,EAAeC,aAAf,KAAiCN,MAAvC;AACA,QAAMO,WAAW,IAAIC,0BAAJ,CAAsB;AACrCN,UAAO,GAAEA,IAAK,MADuB;AAErCO,iBAAa,0BAFwB;AAGrCC,YAAQ,OAAO;AACbC,YAAM;AACJrB,cAAMW,QADF;AAEJW,iBAASP,WAFL;AAGJI,qBAAa;AAHT,OADO;AAMbI,cAAQ;AACNvB,cAAM,IAAIwB,uBAAJ,CAAmBvB,sBAAnB,CADA;AAENqB,iBAASN,aAFH;AAGNG,qBAAa;AAHP,OANK;AAWb,SAAIX,kBAAkBK,UAAlB;AAXS,KAAP;AAH6B,GAAtB,CAAjB;;AAkBA,QAAMY,iBAAiB,IAAIP,0BAAJ,CAAsB;AAC3CN,UAAO,GAAEA,IAAK,YAD6B;AAE3CO,iBAAa,kCAF8B;AAG3CC,YAAQ,OAAO;AACbM,gBAAU;AACR1B,cAAM,IAAIwB,uBAAJ,CAAmBG,YAAnB,CADE;AAERR,qBAAa;AAFL,OADG;AAKbS,aAAO;AACL5B,cAAM,IAAI6B,oBAAJ,CAAgBZ,QAAhB,CADD;AAELE,qBAAa;AAFR,OALM;AASb,SAAIX,kBAAkBM,gBAAlB;AATS,KAAP;AAHmC,GAAtB,CAAvB;;AAgBA,SAAO,EAAEG,QAAF,EAAYQ,cAAZ,EAAP;AACD;;AAED;;;AAGA,MAAME,eAAe,IAAIT,0BAAJ,CAAsB;AACzCN,QAAM,UADmC;AAEzCO,eAAa,+CAF4B;AAGzCC,UAAQ,OAAO;AACbU,iBAAa;AACX9B,YAAM,IAAIwB,uBAAJ,CAAmBO,uBAAnB,CADK;AAEXZ,mBAAa;AAFF,KADA;AAKba,qBAAiB;AACfhC,YAAM,IAAIwB,uBAAJ,CAAmBO,uBAAnB,CADS;AAEfZ,mBAAa;AAFE,KALJ;AASbc,iBAAa;AACXjC,YAAMC,sBADK;AAEXkB,mBAAa;AAFF,KATA;AAabe,eAAW;AACTlC,YAAMC,sBADG;AAETkB,mBAAa;AAFJ;AAbE,GAAP;AAHiC,CAAtB,CAArB","file":"customConnection.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport { GraphQLBoolean, GraphQLInt, GraphQLNonNull, GraphQLList, GraphQLObjectType, GraphQLString } from 'graphql';\n\nimport type { GraphQLFieldConfigArgumentMap, GraphQLFieldConfigMap, GraphQLFieldResolver, Thunk } from 'graphql';\n\n/**\n * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field\n * whose return type is a connection type with forward pagination.\n */\nexport const forwardConnectionArgs: GraphQLFieldConfigArgumentMap = {\n  after: {\n    type: GraphQLString,\n  },\n  first: {\n    type: GraphQLInt,\n  },\n};\n\n/**\n * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field\n * whose return type is a connection type with backward pagination.\n */\nexport const backwardConnectionArgs: GraphQLFieldConfigArgumentMap = {\n  before: {\n    type: GraphQLString,\n  },\n  last: {\n    type: GraphQLInt,\n  },\n};\n\n/**\n * Returns a GraphQLFieldConfigArgumentMap appropriate to include on a field\n * whose return type is a connection type with bidirectional pagination.\n */\nexport const connectionArgs: GraphQLFieldConfigArgumentMap = {\n  ...forwardConnectionArgs,\n  ...backwardConnectionArgs,\n};\n\ntype ConnectionConfig = {\n  name?: ?string,\n  nodeType: GraphQLObjectType,\n  resolveNode?: ?GraphQLFieldResolver<*, *>,\n  resolveCursor?: ?GraphQLFieldResolver<*, *>,\n  edgeFields?: ?Thunk<GraphQLFieldConfigMap<*, *>>,\n  connectionFields?: ?Thunk<GraphQLFieldConfigMap<*, *>>,\n};\n\ntype GraphQLConnectionDefinitions = {\n  edgeType: GraphQLObjectType,\n  connectionType: GraphQLObjectType,\n};\n\nfunction resolveMaybeThunk<T>(thingOrThunk: Thunk<T>): T {\n  return typeof thingOrThunk === 'function' ? thingOrThunk() : thingOrThunk;\n}\n\n/**\n * Returns a GraphQLObjectType for a connection with the given name,\n * and whose nodes are of the specified type.\n */\nexport function connectionDefinitions(config: ConnectionConfig): GraphQLConnectionDefinitions {\n  const { nodeType } = config;\n  const name = config.name || nodeType.name;\n  const edgeFields = config.edgeFields || {};\n  const connectionFields = config.connectionFields || {};\n  const { resolveNode, resolveCursor } = config;\n  const edgeType = new GraphQLObjectType({\n    name: `${name}Edge`,\n    description: 'An edge in a connection.',\n    fields: () => ({\n      node: {\n        type: nodeType,\n        resolve: resolveNode,\n        description: 'The item at the end of the edge',\n      },\n      cursor: {\n        type: new GraphQLNonNull(GraphQLString),\n        resolve: resolveCursor,\n        description: 'A cursor for use in pagination',\n      },\n      ...(resolveMaybeThunk(edgeFields): any),\n    }),\n  });\n\n  const connectionType = new GraphQLObjectType({\n    name: `${name}Connection`,\n    description: 'A connection to a list of items.',\n    fields: () => ({\n      pageInfo: {\n        type: new GraphQLNonNull(pageInfoType),\n        description: 'Information to aid in pagination.',\n      },\n      edges: {\n        type: new GraphQLList(edgeType),\n        description: 'A list of edges.',\n      },\n      ...(resolveMaybeThunk(connectionFields): any),\n    }),\n  });\n\n  return { edgeType, connectionType };\n}\n\n/**\n * The common page info type used by all connections.\n */\nconst pageInfoType = new GraphQLObjectType({\n  name: 'PageInfo',\n  description: 'Information about pagination in a connection.',\n  fields: () => ({\n    hasNextPage: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'When paginating forwards, are there more items?',\n    },\n    hasPreviousPage: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'When paginating backwards, are there more items?',\n    },\n    startCursor: {\n      type: GraphQLString,\n      description: 'When paginating backwards, the cursor to continue.',\n    },\n    endCursor: {\n      type: GraphQLString,\n      description: 'When paginating forwards, the cursor to continue.',\n    },\n  }),\n});\n"]}